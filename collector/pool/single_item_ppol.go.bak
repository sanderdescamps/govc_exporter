package pool

import (
	"sync"
)

type SingleItemPool[T any] struct {
	poolObject *T
	lock       sync.Mutex
}

func NewSingleItemPoolFromCreatorFunc[T any](creator func() *T) Pool[T] {
	singlePool := SingleItemPool[T]{
		poolObject: creator(),
	}

	return &singlePool
}

func NewSingleItemPool[T any](item *T) Pool[T] {
	singlePool := SingleItemPool[T]{
		poolObject: item,
	}

	return &singlePool
}

func (p *SingleItemPool[T]) Acquire() (*T, int) {
	p.lock.Lock()
	return p.poolObject, 1
}

func (p *SingleItemPool[T]) Release(id int) {
	p.lock.Unlock()
}
